
..  _RefTests:

Test suite
****************************************************************************

The Dragonfly library contains tests to verify its functioning and
assure its quality.  These tests come in two distinct types:

 * Tests based on `unittest <http://docs.python.org/library/unittest.html>`_.
 * Tests based on `doctest <http://docs.python.org/library/doctest.html>`_;
   these also serve as documentation by providing usage examples.

See the links below for tests of both types.

Tests in doctests format:

.. toctree::
   :maxdepth: 2

   test_grammar_elements_basic_doctest
   test_grammar_elements_compound_doctest
   test_grammar_list_doctest
   test_recobs_doctest
   test_action_base_doctest
   test_word_formatting_v10_doctest
   test_word_formatting_v11_doctest


Tests based on the unittest framework reside in the :mod:`dragonfly.test`
package.

.. toctree::
   :maxdepth: 2


Running the test suite
============================================================================

Using DNS
----------------------------------------------------------------------------

Follow the following steps to run the test suite for the DNS backend:

 #. Start DNS.  (And ensure that NatLink is also automatically started.)
 #. Extract the Dragonfly source code in a directory ``<dir>``.
 #. Run the tests with the following commands:

    .. code:: shell

        cd <dir>
        python setup.py test --test-suite=dragonfly.test.suites.natlink_suite


Different tests need to be run for different DNS versions. The natlink test
suite will attempt to run the correct tests for the version of DNS you are
using.


Using WSR
----------------------------------------------------------------------------

Follow the following steps to run the test suite for the WSR backend:

 #. Start WSR.
 #. Wake WSR up, so that it is *not* in sleeping state, and then turn the
    microphone *off*.  (It is important to wake the microphone up first,
    because otherwise it'll be off and sleeping at the same time.  This
    causes all recognitions to fail.  Weird, huh?)
 #. Extract the Dragonfly source code in a directory ``<dir>``.
 #. Run the tests with the following commands:

    .. code:: shell

        cd <dir>
        python setup.py test --test-suite=dragonfly.test.suites.sapi5_suite

You can also run the test suite for the in process engine class. It has no
GUI for the moment. Run the tests with the following commands:

    .. code:: shell

        cd <dir>
        python setup.py test --test-suite=dragonfly.test.suites.sapi5inproc_suite

Using the text-input engine
----------------------------------------------------------------------------

Follow the following steps to run the test suite for the "text" backend:

 #. Extract the Dragonfly source code in a directory ``<dir>``.
 #. Run the tests with the following commands:

    .. code:: shell

        cd <dir>
        python setup.py test


This is the default test suite for dragonfly and has no additional
dependencies. The ``--test-suite`` argument does not need to be specified
in this case.
